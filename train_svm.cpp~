
#include "train_svm.h"

//CvParamGrid Cgrid=CvSVM::get_default_grid(CvSVM::C);
//CvParamGrid gammaGrid=CvSVM::get_default_grid(CvSVM::GAMMA);
//CvParamGrid pGrid=CvSVM::get_default_grid(CvSVM::P);
//CvParamGrid nuGrid=CvSVM::get_default_grid(CvSVM::NU);
//CvParamGrid coeffGrid=CvSVM::get_default_grid(CvSVM::COEF);
//CvParamGrid degreeGrid=CvSVM::get_default_grid(CvSVM::DEGREE);




//1.train the SVM 1 vs 24 1 postive and 23 negative examples
//2.store the SVM parameter on disk.

void trainSVM(map<string,Mat>& classes_training_data, int response_cols, int response_type) {


	//train 1-vs-all SVMs
	vector<string> classes_names;
	for (map<string,Mat>::iterator it = classes_training_data.begin(); it != classes_training_data.end(); ++it) {
		classes_names.push_back((*it).first);
	}
    	int class_succufly_trained = 0 ;
	#pragma omp parallel for schedule(dynamic) num_threads(4)
	for (size_t i=0;i<classes_names.size() ;i++) {
		string class_ = classes_names[i];
		cout << "Thread " << omp_get_thread_num() << " training class: " << class_ << ".." << endl;

		Mat samples(0,response_cols,response_type);
		Mat labels(0,1,CV_32FC1);

		//copy class samples and label
		//cout <<"TRAIN("<< class_ <<")::" << "adding " << classes_training_data[class_].rows << " positive samples" << endl;
		samples.push_back(classes_training_data[class_]);
		Mat class_label = Mat::ones(classes_training_data[class_].rows, 1, CV_32FC1);
		labels.push_back(class_label);

		//copy rest samples and label
		for (map<string,Mat>::iterator it1 = classes_training_data.begin(); it1 != classes_training_data.end(); ++it1) {
			string not_class_ = (*it1).first;
			if(not_class_.compare(class_)==0) continue;
			samples.push_back(classes_training_data[not_class_]);
			class_label = Mat::zeros(classes_training_data[not_class_].rows, 1, CV_32FC1);
			labels.push_back(class_label);
		//	cout << "TRAIN(" << class_ << " )::" << "adding"
		//	<< classes_training_data[not_class_].rows  <<"of " << not_class_ << "negative samples" << endl ;

		}
    //for now the examples are two type class_ is pos and not_class_ is negative
    // feed the SVM with examples ,and start  training.
		cout << "Train.." << endl;

		Mat samples_32f;
		samples.convertTo(samples_32f, CV_32F);
		if(samples.rows == 0) {cout <<"NTH CLASS!" ; continue ; } //NTH class?!
		CvSVM classifier;
		CvSVMParams params;
		//best configuration
		params.C = 130;
		params.gamma =4;
		params.term_crit = cvTermCriteria( CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100000000, FLT_EPSILON );
		if (classifier.train(samples_32f,labels, Mat(), Mat(), params ) ) {

            #pragma omp atomic
            class_succufly_trained++;

		}
		int num_support_vec     = classifier.get_support_vector_count();
        cout << "Number of Support vectors = " << num_support_vec << endl ;
        //store the SVM parameter for each class
		{
			stringstream ss;
			ss << "SVM_classifier_";
			ss << class_ << ".yaml";

			cout << "Save.." << endl;
			classifier.save(ss.str().c_str());
		}
		cout << "Training " << class_ << "finish ,and it's parameter file stored on disk" <<endl ;
	}
	cout  << "Number of Succufully trained classes = " << class_succufly_trained << endl ;
}

/*
    read the examples from disk into a map of classes
    train the SVM
*/

int train_svm_main (int argc , char** argv  ){

    if( argc < 2 ){
        cerr << "USAGE:./train_svm [train_samples] " << endl ;
        return -2 ;
    }
    string samples_pathfile   = "train_sample/";
    samples_pathfile += argv[1];
    cout << "load Samples from file.."<<endl;
	map<string,Mat> classes_training_data;
	FileStorage fs(samples_pathfile,FileStorage::READ);
	string prefix ="class_";
	//size_t num_samples  = 0 ;
	for (size_t i = 1 ; i <= 24; i++ ) {
        stringstream ss ;
        ss << prefix <<i ;
        string class_ = ss.str();
        //cout << class_<< endl ;
		fs[class_ ] >> classes_training_data[class_];
		//num_samples += classes_training_data[class_].rows  ;
		//cout << "Number of Samples from " << class_ << "= "<<classes_training_data[class_].rows  << endl ;

	}
    fs.release();
//    cout <<" Number of clasess  = " << classes_training_data.size()  << endl ;
//    cout << "Total Number of Samples  = " << num_samples << endl ;

	cout << "train SVM.." <<endl;
	Mat& one_class = (*(classes_training_data.begin())).second;
	//cout << (*(classes_training_data.begin())).first;
	//cout << "Number of cols should be 800" << one_class.cols << "TYPE CV32F" <<  one_class.type() << endl ;
	trainSVM(classes_training_data, one_class.cols, one_class.type());
	cout << " Training SVM DONE " << endl ;


return 0;
}
